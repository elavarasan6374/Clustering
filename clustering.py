# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14-p3U9oX62X4Rz5Vguiyv37IyA-Mo73z
"""

import numpy as np
import pandas as pd

dataset=pd.read_csv("/content/Mall_Customers.csv")
dataset

dataset.shape

dataset.info()

dataset.isnull().sum()

### Feature sleection for the model:- Annual income and Spending Score
X= dataset.iloc[:, [3,4]].values
X

dataset.head()

dataset.describe()

def kmeans(X, k, max_iterations=100):
    # Initialize the centroids randomly
    centroids = X[np.random.choice(X.shape[0], k, replace=False), :]

    for iteration in range(max_iterations):
        # Assign each data point to its nearest centroid
        distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2))
        cluster_assignments = np.argmin(distances, axis=0)

        # Update the centroids to be the mean of their assigned data points
        for cluster in range(k):
            centroids[cluster] = X[cluster_assignments == cluster].mean(axis=0)

    return centroids, cluster_assignments

centroids, cluster_assignments = kmeans(X, k=3)

# Print the results
print("Centroids:")
print(centroids)
print("Cluster assignments:")
print(cluster_assignments)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

plt.scatter(X[cluster_assignments == 0, 0], X[cluster_assignments == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[cluster_assignments == 1, 0], X[cluster_assignments == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[cluster_assignments == 2, 0], X[cluster_assignments == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[cluster_assignments == 3, 0], X[cluster_assignments == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[cluster_assignments == 4, 0], X[cluster_assignments == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()